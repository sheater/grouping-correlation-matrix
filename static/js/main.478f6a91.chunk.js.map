{"version":3,"sources":["consts.ts","utils.ts","correlationMatrix.ts","Camera.tsx","MatrixPlot.tsx","mesh.ts","description.ts","LevelSlider.tsx","Controls.tsx","Visualisation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EProjection","sumArray","a","reduce","acc","x","getRGBStringFromCorrelationCoef","coef","r","Math","ceil","b","isCorrelationCoefInBounds","value","bounds","absVal","abs","CorrelationSubmatrix","name","columns","items","correlationFunc","values","itemsCount","this","length","map","y_key","y_idx","x_key","x_idx","itemsFilt","filter","record","hasOwnProperty","xs","item","ys","MultilevelCorrelationMatrix","data","categoricalVar","numericalCols","submatrices","groups","entry","push","Object","entries","NUMERICAL_COLUMNS","CATEGORICAL_COLUMNS","CORRELATION_TYPE_OPTIONS","label","func","xMean","yMean","xVar","pow","yVar","y","xStd","sqrt","yStd","s","i","xRanked","sort","yRanked","dSqCum","DESC_LINE_COLOR_LIGHT","DESC_LINE_COLOR_DARK","INACTIVE_CELL_SIZE","Camera","useThree","gl","camera","controls","React","useMemo","position","set","OrbitControls","domElement","useEffect","dispose","MatrixPlot","font","matrix","controlState","scene","Interaction","correlationBounds","anchor","THREE","geometry","levelGroups","forEach","submatrix","z","levelGroup","row","cell","color","material","transparent","opacity","mesh","scale","add","createCorrelationMesh","staticDescription","linePoints","matDark","side","columnName","shapes","generateShapes","rotateX","PI","rotateY","text","numericalColsCount","computeBoundingBox","xMid","boundingBox","max","min","LABELS_DIST","setFromPoints","line","sideSize","geometry2","material2","plane","createStaticCorrelationDescription","levelDescriptions","levelsCount","textGeometry","matZLabels","lineGeometry","createDynamicCorrelationDescription","dynamicDescription","currentLevel","index","traverse","descendant","visibleLevels","levelDesc","Fragment","object","LevelSlider","actions","canvasRef","useRef","handleKeyDown","e","key","setControlState","document","addEventListener","removeEventListener","current","canvas","context","getContext","clearRect","width","height","dy","sub","yi","currX","xi","zi","globalAlpha","fillStyle","fillRect","style","display","vertical","onChange","changeControlState","ref","left","top","Controls","categoryOptions","maxLevelsOfInterest","className","currentCategory","newValue","options","correlationType","console","log","step","marks","0","0.5","1","defaultValue","Visualisation","categoricalCounts","column","valueCount","fromEntries","keys","useState","changes","attach","args","PATH_PREFIX","App","setData","setFont","FontLoader","load","fetch","then","response","Papa","parse","header","cells","slice","includes","Number","parseFloat","isNaN","right","bottom","loading","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.478f6a91.chunk.js","sourcesContent":["import { pearsonCorrelation, spearmanCorrelation } from \"./correlationMatrix\";\nimport { ICorrelationTypeOption } from \"./shared\";\n\nexport const NUMERICAL_COLUMNS = [\n  \"Price\",\n  \"Living_space\",\n  \"Lot\",\n  \"Usable_area\",\n  \"Rooms\",\n  \"Bedrooms\",\n  \"Bathrooms\",\n  \"Floors\",\n  \"Year_built\",\n  \"Year_renovated\",\n  \"Energy_consumption\",\n  \"Garages\",\n];\n\nexport const CATEGORICAL_COLUMNS = [\n  \"Type\",\n  \"Furnishing_quality\",\n  \"Condition\",\n  \"Heating\",\n  \"State\",\n  \"City\",\n  \"Garagetype\",\n];\n\nexport const CORRELATION_TYPE_OPTIONS: Array<ICorrelationTypeOption> = [\n  { value: \"pearson\", label: \"Pearson\", func: pearsonCorrelation },\n  { value: \"spearman\", label: \"Spearman\", func: spearmanCorrelation },\n  //   { value: \"kendall\", label: \"Kendall Tau\", func: kendallCorrelation },\n];\n\nexport enum EProjection {\n  PERSPECTIVE = \"perspective\",\n  ORTHOGRAPHIC = \"orthographic\",\n}\n\nexport const DESC_ACTIVE_COLOR = 0x006600;\nexport const DESC_LINE_COLOR_LIGHT = 0x999999;\nexport const DESC_LINE_COLOR_DARK = 0x101010;\nexport const LABELS_DIST = 1.0;\nexport const INACTIVE_CELL_SIZE = 0.2;\n","export const sumArray = (a: Array<number>) => a.reduce((acc, x) => acc + x, 0);\n\nexport const getRGBStringFromCorrelationCoef = (coef: number) => {\n  const r = Math.ceil((coef < 0 ? -coef : 0) * 100);\n  const b = Math.ceil((coef > 0 ? coef : 0) * 100);\n\n  return `rgb(${r}%, 0%, ${b}%)`;\n};\n\nexport const isCorrelationCoefInBounds = (value: number, bounds: [number, number]) => {\n    const absVal = Math.abs(value);\n\n    return absVal >= bounds[0] && absVal <= bounds[1];\n}\n","import { sumArray } from \"./utils\";\n\nexport type TCorrelationFunc = (xs: Array<number>, ys: Array<number>) => number;\n\nexport const pearsonCorrelation: TCorrelationFunc = (\n  xs: Array<number>,\n  ys: Array<number>\n): number => {\n  const xMean = sumArray(xs) / xs.length;\n  const yMean = sumArray(ys) / ys.length;\n\n  const xVar =\n    xs.reduce((acc, x) => acc + Math.pow(x - xMean, 2), 0) / xs.length;\n  const yVar =\n    ys.reduce((acc, y) => acc + Math.pow(y - yMean, 2), 0) / ys.length;\n  const xStd = Math.sqrt(xVar);\n  const yStd = Math.sqrt(yVar);\n\n  if (xStd > 0.0 && yStd > 0.0) {\n    let s = 0.0;\n\n    for (let i = 0; i < xs.length; i++) {\n      s += (xs[i] - xMean) * (ys[i] - yMean);\n    }\n\n    const cov = s / xs.length;\n\n    return cov / (xStd * yStd);\n  } else {\n    return 0.0;\n  }\n};\n\nexport const spearmanCorrelation: TCorrelationFunc = (\n  xs: Array<number>,\n  ys: Array<number>\n): number => {\n  if (xs.length <= 1) {\n    return 0;\n  }\n\n  const xRanked = xs.map((x, i) => [i, x]).sort((a, b) => a[1] - b[1]);\n  const yRanked = ys.map((y, i) => [i, y]).sort((a, b) => a[1] - b[1]);\n\n  let dSqCum = 0.0;\n\n  for (let i = 0; i < xs.length; i++) {\n    dSqCum += (xRanked[i][0] - yRanked[i][0]) ** 2;\n  }\n\n  return 1.0 - (6 * dSqCum) / (xs.length * (xs.length ** 2 - 1));\n};\n\nexport const kendallCorrelation: TCorrelationFunc = (\n  xs: Array<number>,\n  ys: Array<number>\n): number => {\n  const xRanked = xs.map((x, i) => [i, x]).sort((a, b) => a[1] - b[1]);\n  const yRanked = ys.map((y, i) => [i, y]).sort((a, b) => a[1] - b[1]);\n\n  let nConcordant = 0;\n  let nDiscordant = 0;\n\n  for (let j = 0; j < xs.length; j++) {\n    for (let i = 0; i < j; i++) {\n      if (xRanked[i] > xRanked[j] && yRanked[i] > yRanked[j]) {\n        nConcordant++;\n      } else if (xRanked[i] < xRanked[j] && yRanked[i] < yRanked[j]) {\n        nDiscordant++;\n      }\n    }\n  }\n\n  return (nConcordant - nDiscordant) / ((xs.length * (xs.length - 1)) / 2);\n};\n\nexport class CorrelationSubmatrix {\n  public readonly values: Array<Array<number | null>>;\n  public readonly itemsCount: number;\n\n  constructor(\n    public readonly name: string,\n    public readonly columns: Array<string>,\n    items: Array<any>,\n    correlationFunc: TCorrelationFunc\n  ) {\n    this.itemsCount = items.length;\n    this.values = columns.map((y_key, y_idx) => {\n      return columns.map((x_key, x_idx) => {\n        if (x_idx >= y_idx) {\n          return null;\n        }\n\n        const itemsFilt = items.filter(\n          (record) =>\n            record.hasOwnProperty(x_key) && record.hasOwnProperty(y_key)\n        );\n\n        if (!itemsFilt.length) {\n          return 0;\n        }\n\n        const xs = itemsFilt.map((item) => item[x_key]);\n        const ys = itemsFilt.map((item) => item[y_key]);\n\n        return correlationFunc(xs, ys);\n      });\n    });\n  }\n\n  get dimensionsCount(): number {\n    return this.columns.length;\n  }\n}\n\nexport class MultilevelCorrelationMatrix {\n  public readonly submatrices: Array<CorrelationSubmatrix> = [];\n\n  get levelsCount(): number {\n    return this.submatrices.length;\n  }\n\n  get numericalColsCount(): number {\n    return this.numericalCols.length;\n  }\n\n  constructor(\n    data: Array<Record<string, any>>,\n    categoricalVar: string,\n    public readonly numericalCols: Array<string>,\n    correlationFunc: TCorrelationFunc\n  ) {\n    const groups: Record<string, any> = {};\n\n    for (const entry of data) {\n      const value = entry[categoricalVar];\n\n      if (value == null) {\n        continue;\n      }\n\n      if (value in groups) {\n        groups[value].push(entry);\n      } else {\n        groups[value] = [entry];\n      }\n    }\n\n    for (const [name, items] of Object.entries(groups)) {\n      this.submatrices.push(\n        new CorrelationSubmatrix(name, numericalCols, items, correlationFunc)\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n\nexport const Camera: React.FunctionComponent<{}> = () => {\n  const { gl, camera } = useThree();\n\n  const controls = React.useMemo<OrbitControls>(() => {\n    camera.position.set(10, 10, -10);\n    const controls = new OrbitControls(camera, gl.domElement);\n\n    return controls;\n  }, [camera, gl.domElement]);\n\n  React.useEffect(() => {\n    return () => {\n      controls.dispose();\n    };\n  }, [controls]);\n\n  return null;\n};\n","import React from \"react\";\nimport { Font } from \"three/examples/jsm/loaders/FontLoader.js\";\nimport { useThree } from \"@react-three/fiber\";\n// @ts-ignore\nimport { Interaction } from \"three.interaction/src/index\";\nimport * as THREE from \"three\";\n\n// import { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\nimport { createCorrelationMesh } from \"./mesh\";\nimport {\n  createDynamicCorrelationDescription,\n  createStaticCorrelationDescription,\n} from \"./description\";\n// import { useVisState, visStateContext } from \"./visState\";\nimport { DESC_ACTIVE_COLOR, DESC_LINE_COLOR_LIGHT, INACTIVE_CELL_SIZE } from \"./consts\";\nimport { IVisControlState } from \"./shared\";\nimport { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\n\ninterface IProps {\n  font: Font;\n  matrix: MultilevelCorrelationMatrix;\n  controlState: IVisControlState;\n}\n\nconst MatrixPlot: React.FunctionComponent<IProps> = ({\n  font,\n  matrix,\n  controlState,\n}) => {\n  //   const { matrix, controlState } = useVisState();\n  //   console.log(\"statestate\", state);\n  //   const { matrix, controlState } = state;\n  const { camera, scene, gl } = useThree();\n  //   const vs = React.useContext(visStateContext);\n\n  //   console.log(\"vs\", vs);\n\n  React.useEffect(() => {\n    new Interaction(gl, scene, camera);\n  }, [camera, scene, gl]);\n\n  //   console.log(\"MatrixPlot.controlState\", useVisState());\n  //   console.log(\"MatrixPlot.controlState\", controlState);\n  //   console.log(\"MatrixPlot.matrix\", matrix);\n\n  const { anchor, levelGroups } = React.useMemo(\n    () => createCorrelationMesh(matrix, controlState.correlationBounds),\n    [matrix, controlState.correlationBounds]\n  );\n\n  const staticDescription = React.useMemo(\n    () => createStaticCorrelationDescription(matrix, font),\n    [matrix, font]\n  );\n\n  const { anchor: dynamicDescription, levelDescriptions } = React.useMemo(\n    () => createDynamicCorrelationDescription(matrix, font),\n    [matrix, font]\n  );\n\n  React.useEffect(() => {\n    anchor.position.y = -controlState.currentLevel;\n    dynamicDescription.position.y = -controlState.currentLevel;\n\n    levelGroups.forEach((levelGroup, index) => {\n      levelGroup.traverse((descendant) => {\n        if (!(descendant instanceof THREE.Mesh)) {\n          return;\n        }\n\n        const mesh = descendant as THREE.Mesh<\n          THREE.BoxGeometry,\n          THREE.MeshBasicMaterial\n        >;\n        const s =\n          index >= controlState.currentLevel &&\n          index < controlState.currentLevel + controlState.visibleLevels\n            ? 1.0\n            : INACTIVE_CELL_SIZE;\n        mesh.scale.set(s, s, s);\n      });\n    });\n\n    levelDescriptions.forEach((levelDesc, index) => {\n      levelDesc.traverse((descendant) => {\n        // console.log(\"descendant\", descendant);\n\n        if (!(descendant instanceof THREE.Mesh)) {\n          return;\n        }\n\n        const mesh = descendant as THREE.Mesh<\n          THREE.ShapeGeometry,\n          THREE.LineBasicMaterial\n        >;\n\n        // mesh.material.color.set(\n        //   index >= level && index < level + visibleLevels\n        //     ? DESC_ACTIVE_COLOR\n        //     : DESC_LINE_COLOR_LIGHT\n        // );\n        // mesh.material.needsUpdate = true;\n        mesh.material.color.set(\n          index >= controlState.currentLevel &&\n            index < controlState.currentLevel + controlState.visibleLevels\n            ? DESC_ACTIVE_COLOR\n            : DESC_LINE_COLOR_LIGHT\n        );\n        // mesh.material.needsUpdate = true;\n      });\n      //   levelGroup.visible = index >= level && index < level + visibleLevels;\n    });\n  }, [\n    levelGroups,\n    levelDescriptions,\n    anchor,\n    dynamicDescription,\n    controlState,\n  ]);\n\n  return (\n    <React.Fragment>\n      <group\n        position={[\n          -matrix.numericalColsCount * 0.75,\n          0,\n          -matrix.numericalColsCount * 0.25,\n        ]}\n      >\n        <primitive object={staticDescription} />\n        <primitive object={dynamicDescription} />\n        <primitive object={anchor} />\n      </group>\n    </React.Fragment>\n  );\n};\n\nexport default MatrixPlot;\n","import * as THREE from \"three\";\n\nimport {\n  CorrelationSubmatrix,\n  MultilevelCorrelationMatrix,\n} from \"./correlationMatrix\";\nimport {\n  getRGBStringFromCorrelationCoef,\n  isCorrelationCoefInBounds,\n} from \"./utils\";\nimport { INACTIVE_CELL_SIZE } from \"./consts\";\n\ninterface ICorrelationMeshes {\n  anchor: THREE.Object3D;\n  levelGroups: Array<THREE.Object3D>;\n}\n\nexport function createCorrelationMesh(\n  matrix: MultilevelCorrelationMatrix,\n  correlationBounds: [number, number]\n): ICorrelationMeshes {\n  const anchor = new THREE.Object3D();\n  const geometry = new THREE.BoxGeometry(1, 1, 1);\n  const levelGroups: Array<THREE.Object3D> = [];\n\n  matrix.submatrices.forEach((submatrix: CorrelationSubmatrix, z: number) => {\n    const levelGroup = new THREE.Object3D();\n\n    submatrix.values.forEach((row: any, y: number) => {\n      row.forEach((cell: any, x: number) => {\n        if (\n          cell == null ||\n          !isCorrelationCoefInBounds(cell, correlationBounds)\n        ) {\n          return null;\n        }\n\n        const color = new THREE.Color(getRGBStringFromCorrelationCoef(cell));\n        const material = new THREE.MeshStandardMaterial({\n          color,\n          transparent: true,\n          opacity: Math.abs(cell),\n        });\n        const mesh = new THREE.Mesh(geometry, material);\n\n        mesh.position.set(x + 0.5, z + 0.5, y + 0.5);\n        mesh.scale.set(\n          INACTIVE_CELL_SIZE,\n          INACTIVE_CELL_SIZE,\n          INACTIVE_CELL_SIZE\n        );\n\n        levelGroup.add(mesh);\n      });\n    });\n\n    levelGroups.push(levelGroup);\n    anchor.add(levelGroup);\n  });\n\n  return { anchor, levelGroups };\n}\n","import * as THREE from \"three\";\nimport { Font } from \"three/examples/jsm/loaders/FontLoader\";\n\nimport { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\nimport {\n  DESC_LINE_COLOR_DARK,\n  DESC_LINE_COLOR_LIGHT,\n  LABELS_DIST,\n} from \"./consts\";\n\ninterface IDynamicDescriptionMeshes {\n  anchor: THREE.Object3D;\n  levelDescriptions: Array<THREE.Object3D>;\n}\n\nexport function createDynamicCorrelationDescription(\n  matrix: MultilevelCorrelationMatrix,\n  font: Font\n): IDynamicDescriptionMeshes {\n  const levelDescriptions = [];\n  const anchor = new THREE.Object3D();\n  const material = new THREE.LineBasicMaterial({ color: 0x999999 });\n\n  for (let z = 0; z < matrix.levelsCount; z++) {\n    const levelGroup = new THREE.Object3D();\n    const linePoints = [];\n\n    linePoints.push(new THREE.Vector3(0, z + 1, -LABELS_DIST * 5));\n    linePoints.push(new THREE.Vector3(0, z + 1, matrix.numericalColsCount));\n\n    const shapes = font.generateShapes(\n      `${matrix.submatrices[z].name} (${matrix.submatrices[z].itemsCount})`,\n      0.5\n    );\n    const textGeometry = new THREE.ShapeGeometry(shapes);\n    const matZLabels = new THREE.LineBasicMaterial({\n      color: DESC_LINE_COLOR_LIGHT,\n      side: THREE.DoubleSide,\n    });\n\n    // geometry.rotateX(-Math.PI / 2);\n    textGeometry.rotateY(Math.PI / 2);\n    const text = new THREE.Mesh(textGeometry, matZLabels);\n    text.position.y = z + 0.3;\n    text.position.z = -LABELS_DIST;\n    // text.position.x = x + 0.7;\n\n    levelGroup.add(text);\n\n    // textGeometry.computeBoundingBox();\n    // @ts-ignore\n    // text.cursor = \"pointer\";\n\n    // // @ts-ignore\n    // geometry.on(\"click\", () => {\n    //   console.log(\"CLIOICKL\");\n    // });\n\n    const lineGeometry = new THREE.BufferGeometry().setFromPoints(linePoints);\n    const line = new THREE.LineSegments(lineGeometry, material);\n\n    levelGroup.add(line);\n\n    anchor.add(levelGroup);\n    levelDescriptions.push(levelGroup);\n  }\n\n  return { anchor, levelDescriptions };\n}\n\nexport function createStaticCorrelationDescription(\n  matrix: MultilevelCorrelationMatrix,\n  font: Font\n): THREE.Object3D {\n  const linePoints = [];\n  const anchor = new THREE.Object3D();\n\n  const matDark = new THREE.LineBasicMaterial({\n    color: DESC_LINE_COLOR_DARK,\n    side: THREE.DoubleSide,\n  });\n\n  matrix.numericalCols.forEach((columnName, x) => {\n    const shapes = font.generateShapes(columnName, 0.5);\n    const geometry = new THREE.ShapeGeometry(shapes);\n\n    // geometry.computeBoundingBox();\n\n    geometry.rotateX(-Math.PI / 2);\n    geometry.rotateY(Math.PI / 2);\n\n    const text = new THREE.Mesh(geometry, matDark);\n    text.position.z = -LABELS_DIST;\n    text.position.x = x + 0.7;\n    anchor.add(text);\n\n    linePoints.push(new THREE.Vector3(x, 0, -LABELS_DIST * 5));\n    linePoints.push(new THREE.Vector3(x, 0, matrix.numericalColsCount));\n  });\n\n  linePoints.push(\n    new THREE.Vector3(matrix.numericalColsCount, 0, -LABELS_DIST * 5)\n  );\n  linePoints.push(\n    new THREE.Vector3(matrix.numericalColsCount, 0, matrix.numericalColsCount)\n  );\n\n  matrix.numericalCols.forEach((columnName, y) => {\n    const shapes = font.generateShapes(columnName, 0.5);\n    const geometry = new THREE.ShapeGeometry(shapes);\n\n    geometry.computeBoundingBox();\n\n    // @ts-ignore\n    const xMid = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\n    geometry.rotateX(-Math.PI / 2);\n    geometry.rotateY(Math.PI);\n    const text = new THREE.Mesh(geometry, matDark);\n    text.position.z = y + 0.2;\n    text.position.x = matrix.numericalColsCount + xMid + LABELS_DIST;\n    anchor.add(text);\n\n    linePoints.push(new THREE.Vector3(0, 0, y));\n    linePoints.push(\n      new THREE.Vector3(matrix.numericalColsCount + LABELS_DIST * 5, 0, y)\n    );\n  });\n\n  linePoints.push(new THREE.Vector3(0, 0, matrix.numericalColsCount));\n  linePoints.push(\n    new THREE.Vector3(\n      matrix.numericalColsCount + LABELS_DIST * 5,\n      0,\n      matrix.numericalColsCount\n    )\n  );\n\n  const geometry = new THREE.BufferGeometry().setFromPoints(linePoints);\n  const material = new THREE.LineBasicMaterial({ color: DESC_LINE_COLOR_DARK });\n  const line = new THREE.LineSegments(geometry, material);\n\n  anchor.add(line);\n\n  const sideSize = matrix.numericalColsCount + 20;\n\n  const geometry2 = new THREE.PlaneGeometry(sideSize, sideSize);\n  const material2 = new THREE.MeshBasicMaterial({\n    color: 0xffffff,\n    side: THREE.DoubleSide,\n    opacity: 0.7,\n    transparent: true,\n  });\n  geometry2.rotateX(Math.PI / 2);\n\n  const plane = new THREE.Mesh(geometry2, material2);\n  plane.position.y = -0.01;\n  plane.position.x = matrix.numericalColsCount / 2;\n  plane.position.z = matrix.numericalColsCount / 2;\n  anchor.add(plane);\n\n  return anchor;\n}\n","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport {\n  getRGBStringFromCorrelationCoef,\n  isCorrelationCoefInBounds,\n} from \"./utils\";\nimport { IVisActions, IVisControlState } from \"./shared\";\nimport { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\n\ninterface IProps {\n  actions: IVisActions;\n  matrix: MultilevelCorrelationMatrix;\n  controlState: IVisControlState;\n}\n\nconst LevelSlider: React.FunctionComponent<IProps> = ({\n  actions,\n  matrix,\n  controlState,\n}) => {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n\n  React.useEffect(() => {\n    const handleKeyDown = (e: any) => {\n      switch (e.key) {\n        case \"ArrowUp\":\n          actions.setControlState((s) => ({\n            ...s,\n            currentLevel:\n              s.currentLevel >= matrix.levelsCount - 1 ? 0 : s.currentLevel + 1,\n          }));\n          break;\n\n        case \"ArrowDown\":\n          actions.setControlState((s) => ({\n            ...s,\n            currentLevel:\n              s.currentLevel <= 0 ? matrix.levelsCount - 1 : s.currentLevel - 1,\n          }));\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matrix]);\n\n  const { correlationBounds } = controlState;\n\n  React.useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      return;\n    }\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    const dy = canvas.height / matrix.levelsCount;\n\n    matrix.submatrices.forEach((sub, yi) => {\n      let currX = 0;\n\n      for (let xi = 0; xi < matrix.numericalColsCount; xi++) {\n        for (let zi = 0; zi < matrix.numericalColsCount; zi++) {\n          if (xi <= zi) {\n            continue;\n          }\n          //   const sub = matrix.submatrices[yi];\n          const value = sub.values[xi][zi];\n\n          currX++;\n\n          if (\n            value == null ||\n            !isCorrelationCoefInBounds(value, correlationBounds)\n          ) {\n            continue;\n          }\n\n          context.globalAlpha = Math.abs(value);\n          context.fillStyle = getRGBStringFromCorrelationCoef(value);\n          context.fillRect(\n            2 * currX,\n            dy * (matrix.levelsCount - 1) - yi * dy,\n            2,\n            dy\n          );\n          context.globalAlpha = 1.0;\n        }\n      }\n    });\n  }, [matrix, correlationBounds]);\n\n  return (\n    <div style={{ height: \"100%\", display: \"block\", position: \"relative\" }}>\n      <Slider\n        vertical\n        // reverse\n        min={0}\n        max={matrix.levelsCount}\n        value={controlState.currentLevel}\n        onChange={(currentLevel) => {\n          if (currentLevel === matrix.levelsCount) {\n            actions.changeControlState({\n              currentLevel: matrix.levelsCount - 1,\n            });\n          } else {\n            actions.changeControlState({ currentLevel });\n          }\n        }}\n      />\n\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: \"absolute\",\n          left: \"40px\",\n          top: \"0px\",\n          width: matrix.numericalColsCount * (matrix.numericalColsCount - 1),\n          height: \"100%\",\n        }}\n      />\n    </div>\n  );\n};\n\nexport default LevelSlider;\n","import React from \"react\";\nimport Slider, { Range } from \"rc-slider\";\nimport Select from \"react-select\";\n\nimport LevelSlider from \"./LevelSlider\";\nimport {\n  ICategoryOption,\n  IVisControlState,\n  IVisActions,\n  ICorrelationTypeOption,\n} from \"./shared\";\nimport { CORRELATION_TYPE_OPTIONS } from \"./consts\";\nimport { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\n\ninterface IProps {\n  matrix: MultilevelCorrelationMatrix;\n  controlState: IVisControlState;\n  actions: IVisActions;\n  categoryOptions: Array<ICategoryOption>;\n}\n\nconst Controls: React.FunctionComponent<IProps> = ({\n  controlState,\n  matrix,\n  actions,\n  categoryOptions,\n}) => {\n  const maxLevelsOfInterest = Math.min(10, matrix.levelsCount);\n\n  return (\n    <React.Fragment>\n      <div className=\"controls-pane controls-left-pane\">\n        <div className=\"controls-label\">Categorical variable</div>\n        <Select\n          value={controlState.currentCategory}\n          onChange={(newValue) => {\n            actions.changeControlState({\n              currentLevel: 0,\n              currentCategory: newValue as ICategoryOption,\n            });\n          }}\n          options={categoryOptions}\n        />\n\n        <br />\n\n        <div className=\"controls-label\">Correlation coefficient</div>\n        <Select\n          value={controlState.correlationType}\n          onChange={(newValue) => {\n            console.log(\"newValue\", newValue);\n            actions.changeControlState({\n              correlationType: newValue as ICorrelationTypeOption,\n            });\n          }}\n          options={CORRELATION_TYPE_OPTIONS}\n        />\n\n        <br />\n\n        <div className=\"controls-label\">Correlation visibility boundaries</div>\n        <Range\n          min={0.0}\n          max={1.0}\n          step={0.05}\n          marks={{ 0.0: 0, 0.5: 0.5, 1.0: 1 }}\n          defaultValue={[0.5, 1.0]}\n          onChange={(value) => {\n            actions.changeControlState({\n              correlationBounds: value as [number, number],\n            });\n          }}\n        />\n\n        <br />\n\n        <div className=\"controls-label\">Levels of interest</div>\n        <Slider\n          min={1}\n          max={maxLevelsOfInterest}\n          marks={{ \"1\": 1, [maxLevelsOfInterest]: maxLevelsOfInterest }}\n          value={controlState.visibleLevels}\n          onChange={(visibleLevels) =>\n            actions.changeControlState({ visibleLevels })\n          }\n        />\n      </div>\n      <div className=\"controls-pane controls-right-pane\">\n        <LevelSlider\n          actions={actions}\n          matrix={matrix}\n          controlState={controlState}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Font } from \"three/examples/jsm/loaders/FontLoader.js\";\n\nimport { Camera } from \"./Camera\";\nimport MatrixPlot from \"./MatrixPlot\";\nimport Controls from \"./Controls\";\nimport {\n  NUMERICAL_COLUMNS,\n  CATEGORICAL_COLUMNS,\n  CORRELATION_TYPE_OPTIONS,\n} from \"./consts\";\nimport { TData, IVisActions, IVisControlState } from \"./shared\";\nimport { MultilevelCorrelationMatrix } from \"./correlationMatrix\";\n\ninterface IProps {\n  data: TData;\n  font: Font;\n}\n\nconst Visualisation: React.FunctionComponent<IProps> = ({ data, font }) => {\n  const categoricalCounts = React.useMemo(() => {\n    const options = CATEGORICAL_COLUMNS.map((column) => {\n      const valueCount: Record<string, number> = {};\n\n      for (const entry of data) {\n        const value = entry[column];\n\n        if (value == null) {\n          continue;\n        }\n\n        if (value in valueCount) {\n          valueCount[value] += 1;\n        } else {\n          valueCount[value] = 1;\n        }\n      }\n\n      return [column, valueCount];\n    });\n\n    return Object.fromEntries(options);\n  }, [data]);\n\n  const categoryOptions = React.useMemo(() => {\n    return CATEGORICAL_COLUMNS.map((x) => ({\n      value: x,\n      label: `${x} (${Object.keys(categoricalCounts[x]).length})`,\n    }));\n  }, [categoricalCounts]);\n\n  const [controlState, setControlState] = React.useState<IVisControlState>({\n    correlationType: CORRELATION_TYPE_OPTIONS[0],\n    currentCategory: categoryOptions[0],\n    correlationBounds: [0.5, 1.0],\n    currentLevel: 0,\n    visibleLevels: 1,\n  });\n\n  const matrix = React.useMemo(() => {\n    return new MultilevelCorrelationMatrix(\n      data,\n      controlState.currentCategory.value,\n      NUMERICAL_COLUMNS,\n      controlState.correlationType.func\n    );\n  }, [data, controlState.currentCategory, controlState.correlationType]);\n\n  const actions: IVisActions = {\n    setControlState,\n    changeControlState: (changes: Partial<IVisControlState>) =>\n      setControlState((s) => ({ ...s, ...changes })),\n  };\n\n  return (\n    <React.Fragment>\n      <Canvas>\n        <Camera />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <color attach=\"background\" args={[1, 1, 1]} />\n\n        <MatrixPlot font={font} controlState={controlState} matrix={matrix} />\n      </Canvas>\n\n      <Controls\n        controlState={controlState}\n        matrix={matrix}\n        actions={actions}\n        categoryOptions={categoryOptions}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Visualisation;\n","import React from \"react\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { FontLoader, Font } from \"three/examples/jsm/loaders/FontLoader.js\";\nimport Papa from \"papaparse\";\n\nimport { NUMERICAL_COLUMNS, CATEGORICAL_COLUMNS } from \"./consts\";\nimport Visualisation from \"./Visualisation\";\n\nconst PATH_PREFIX = \"/grouping-correlation-matrix\";\n\nexport default function App() {\n  const [data, setData] = React.useState<any>(null);\n  const [font, setFont] = React.useState<Font | null>(null);\n\n  React.useEffect(() => {\n    const loader = new FontLoader();\n\n    loader.load(`${PATH_PREFIX}/fonts/Raleway_Regular.json`, function (item) {\n      setFont(item);\n    });\n\n    fetch(`${PATH_PREFIX}/data/germany_housing_data.csv`)\n      .then((response) => response.text())\n      .then((response) => {\n        const { data } = Papa.parse<Array<string>>(response);\n\n        const header = data[0];\n\n        const cells = data.slice(1).map((row) => {\n          const entry: Record<string, any> = {};\n\n          header.forEach((column, index) => {\n            if (NUMERICAL_COLUMNS.includes(column)) {\n              const value = Number.parseFloat(row[index]);\n\n              if (!Number.isNaN(value)) {\n                entry[column] = value;\n              }\n            } else if (CATEGORICAL_COLUMNS.includes(column)) {\n              if (row[index]?.length) {\n                entry[column] = row[index];\n              }\n            }\n          });\n\n          return entry;\n        });\n\n        setData(cells);\n      });\n  }, []);\n\n  return (\n    <div style={{ position: \"absolute\", top: 0, right: 0, bottom: 0, left: 0 }}>\n      {data && font ? (\n        <Visualisation data={data} font={font} />\n      ) : (\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"calc(50% - 100px)\",\n            left: \"calc(50% - 100px)\",\n          }}\n        >\n          <PacmanLoader color=\"#6600cc\" loading={true} size={100} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}